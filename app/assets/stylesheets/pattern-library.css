@media screen and (max-width: 24.9375rem) {
  .media__helpers--hide-before-small {
    display: none; } }

@media screen and (min-width: 25.0625rem) {
  .media__helpers--hide-after-small {
    display: none; } }

.media__helpers--show-after-small {
  display: none; }
  @media screen and (min-width: 25.0625rem) {
    .media__helpers--show-after-small {
      display: block; } }

@media screen and (max-width: 37.4375rem) {
  .media__helpers--hide-before-medium {
    display: none; } }

@media screen and (min-width: 37.5625rem) {
  .media__helpers--hide-after-medium {
    display: none; } }

.media__helpers--show-after-medium {
  display: none; }
  @media screen and (min-width: 37.5625rem) {
    .media__helpers--show-after-medium {
      display: block; } }

@media screen and (max-width: 49.9375rem) {
  .media__helpers--hide-before-large {
    display: none; } }

@media screen and (min-width: 50.0625rem) {
  .media__helpers--hide-after-large {
    display: none; } }

.media__helpers--show-after-large {
  display: none; }
  @media screen and (min-width: 50.0625rem) {
    .media__helpers--show-after-large {
      display: block; } }

.avatar {
  z-index: 10;
  position: relative;
  -webkit-box-flex: 0;
  -webkit-flex: 0 0 auto;
      -ms-flex: 0 0 auto;
          flex: 0 0 auto;
  display: inline-block;
  background-color: #f1f1f1;
  border-radius: 4px;
  overflow: hidden;
  font-size: 1.25rem; }

.avatar__initials {
  z-index: 10;
  position: absolute;
  top: 50%;
  left: 0;
  width: 100%;
  -webkit-transform: translateY(-50%);
          transform: translateY(-50%);
  color: #cfcfcf;
  font-size: 1em;
  line-height: 1;
  text-align: center;
  text-transform: uppercase; }

.avatar__image {
  z-index: 20;
  position: relative;
  height: 3rem;
  width: 3rem;
  opacity: 0;
  background-size: cover;
  background-position: center center;
  background-repeat: no-repeat;
  overflow: hidden;
  -webkit-transition: opacity 0.3s ease;
          transition: opacity 0.3s ease; }

.avatar__image--is-visible {
  opacity: 1; }

.avatar__container {
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-flex-wrap: wrap;
      -ms-flex-wrap: wrap;
          flex-wrap: wrap;
  overflow: hidden;
  margin-right: -0.5rem !important;
  margin-bottom: -0.5rem !important;
  max-width: 10.5rem; }
  .avatar__container > .avatar {
    margin-right: 0.5rem;
    margin-bottom: 0.5rem; }

.avatar__container--large {
  max-width: 14rem; }

.badge {
  position: relative;
  -webkit-box-flex: 0;
  -webkit-flex: 0 0 auto;
      -ms-flex: 0 0 auto;
          flex: 0 0 auto;
  display: inline-block;
  padding: 0.15em 0.5em 0.25em;
  border-radius: 4px;
  background-color: #f2f2f3;
  font-size: 0.75em;
  line-height: 1.3;
  vertical-align: middle;
  color: #9c9da5; }

.badge--warning {
  background-color: #fdf7af;
  color: #857e32; }

.badge--new {
  background-color: #b7d6f6;
  color: #627990; }

.badge--secret {
  background-color: #6e6f7a;
  color: #e3e4e6; }

.badge--code {
  padding-bottom: 0;
  padding-top: 0.2em; }

.badge--standalone {
  font-size: 1rem; }

.badge__container {
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-flex-wrap: wrap;
      -ms-flex-wrap: wrap;
          flex-wrap: wrap;
  overflow: hidden;
  margin-right: -0.5rem !important;
  margin-bottom: -0.5rem !important; }
  .badge__container > .badge {
    margin-right: 0.5rem;
    margin-bottom: 0.5rem; }

.docks-button {
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-box-align: center;
  -webkit-align-items: center;
      -ms-flex-align: center;
          align-items: center;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
      -ms-flex-pack: center;
          justify-content: center;
  padding: 0 0.75rem;
  border-radius: 4px;
  background-color: #f2f2f3;
  border: none;
  cursor: pointer;
  opacity: 1;
  -webkit-transition: opacity 0.3s ease;
          transition: opacity 0.3s ease;
  font-size: 1.125rem;
  line-height: 2.125rem;
  color: #9c9da5;
  vertical-align: middle;
  text-decoration: none;
  white-space: nowrap; }
  .docks-button:focus,
  .docks-button:active {
    background-color: #e3e4e6;
    outline: none; }
  .docks-button > *:first-child {
    margin-right: 0.5rem; }

.docks-button--dark {
  background-color: #d1d3d7;
  color: #6e6f7a; }
  .docks-button--dark:focus,
  .docks-button--dark:active {
    background-color: #d1d3d7;
    color: #6e6f7a; }

.docks-button--is-disabled {
  opacity: 0.3; }

.docks-button__container {
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-flex-wrap: wrap;
      -ms-flex-wrap: wrap;
          flex-wrap: wrap;
  margin-right: -0.5rem !important;
  margin-bottom: -0.5rem !important; }
  .docks-button__container:after {
    content: "";
    display: table; }
  .docks-button__container > * {
    -webkit-box-flex: 0;
    -webkit-flex: 0 0 auto;
        -ms-flex: 0 0 auto;
            flex: 0 0 auto;
    margin-right: 0.5rem;
    margin-bottom: 0.5rem; }

.docks-button__container--fill-width {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-wrap: wrap;
      -ms-flex-wrap: wrap;
          flex-wrap: wrap;
  -webkit-box-align: start;
  -webkit-align-items: flex-start;
      -ms-flex-align: start;
          align-items: flex-start; }
  .docks-button__container--fill-width .docks-button,
  .docks-button__container--fill-width > *:not(.docks-button) {
    display: -webkit-box;
    display: -webkit-flex;
    display: -ms-flexbox;
    display: flex;
    -webkit-box-flex: 1;
    -webkit-flex: 1 0 0%;
        -ms-flex: 1 0 0%;
            flex: 1 0 0%;
    min-width: -webkit-min-content;
    min-width: -moz-min-content;
    min-width: min-content; }

.docks-button__segmented-container {
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex; }
  .docks-button__segmented-container > .docks-button {
    border-radius: 0; }
    .docks-button__segmented-container > .docks-button:not(:first-child) {
      border-left: none; }
    .docks-button__segmented-container > .docks-button:first-child {
      border-radius: 4px 0 0 4px; }
    .docks-button__segmented-container > .docks-button:last-child {
      border-radius: 0 4px 4px 0; }

.card {
  background-color: white;
  border-radius: 4px;
  overflow: hidden; }

.code-block {
  margin: 1rem 0;
  overflow: hidden;
  background: #f2f2f3;
  border-radius: 4px; }
  .code-block .docks-button {
    display: none; }

.code-block--condensed {
  margin-top: 0.5rem; }
  .code-block--condensed .code-block__code {
    padding-bottom: 0.5rem;
    font-size: 0.875rem; }
  .code-block--condensed:not(.code-block--with-header) .code-block__code {
    padding-top: 0.5rem; }

.code-block--full-width {
  margin-right: 0;
  margin-left: 0;
  border-radius: 0; }
  .content .code-block--full-width {
    margin-left: -1rem;
    margin-right: -1rem; }

.code-block--is-hidden:not(.code-block--with-demo) .code-block__toggler {
  background-color: #f2f2f3; }

.code-block--is-hidden .code-block__content {
  height: 0; }

.code-block__actions {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-align: center;
  -webkit-align-items: center;
      -ms-flex-align: center;
          align-items: center; }

.code-block__header {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-pack: justify;
  -webkit-justify-content: space-between;
      -ms-flex-pack: justify;
          justify-content: space-between;
  -webkit-box-align: center;
  -webkit-align-items: center;
      -ms-flex-align: center;
          align-items: center;
  padding: 0.5rem 1rem;
  -webkit-box-flex: 0 !important;
  -webkit-flex: 0 0 auto !important;
      -ms-flex: 0 0 auto !important;
          flex: 0 0 auto !important;
  background: #f2f2f3; }
  .code-block__header .select,
  .code-block__header .tablist {
    -webkit-transition: -webkit-transform 0.2s ease;
            transition: transform 0.2s ease; }
  .code-block__header .tablist {
    padding: 0; }

.code-block__code-container {
  overflow: auto;
  max-height: 100%; }

.code-block__toggler {
  background-color: #e3e4e6;
  width: 100%;
  border: none;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-align: center;
  -webkit-align-items: center;
      -ms-flex-align: center;
          align-items: center;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
      -ms-flex-pack: center;
          justify-content: center;
  font-size: 1.125rem;
  padding: 0.5rem 0;
  color: #9c9da5;
  -webkit-transition: background-color 0.2s ease;
          transition: background-color 0.2s ease; }
  .code-block__toggler:focus,
  .code-block__toggler:active {
    background-color: #e3e4e6;
    outline: none; }
  .code-block__toggler > .icon {
    margin-right: 0.5rem;
    opacity: 0.5; }

.code-block__content {
  overflow: hidden;
  -webkit-transition: height 0.3s ease;
          transition: height 0.3s ease;
  max-height: 15rem; }

.code-block__code {
  margin: 0;
  display: inline-block;
  padding: 0.5rem 1rem 1rem;
  font-size: 1rem;
  line-height: 1.3; }
  .code-block__code:focus {
    outline: none; }
  .code-block:not(.code-block--with-header):not(.code-block--condensed):not(.code-block--with-demo) .code-block__code {
    padding-top: 1rem; }
  .code-block--with-demo:not(.code-block--with-header) .code-block__code {
    padding-top: 0; }
  .code-block__code > code {
    padding: 0;
    background-color: transparent;
    font-size: inherit !important;
    border: none; }

.hljs-value,
.hljs-string,
.hljs-preprocessor {
  color: #4196df; }

.hljs-symbol {
  color: #1a5cab; }

.hljs-at_rule,
.hljs-attribute,
.hljs-keyword {
  color: #4a4a4a; }

.hljs-comment {
  color: rgba(177, 177, 177, 0.5);
  font-style: italic; }

.hljs-tag,
.hljs-variable {
  color: #b1b1b1; }

.code-block--with-demo .code-block__content {
  padding-top: 0; }
  .code-block--with-demo .code-block__content > .code-block__header {
    padding-top: 0; }

.code-block__demo {
  padding: 1rem; }

.code-block__demo__content {
  display: none; }

.code-block__iframe {
  height: 10em;
  background-color: white;
  border: none;
  width: 100%;
  margin: 0;
  border-radius: 4px; }

.demo {
  background-color: white;
  min-height: 10rem; }

.demo__section {
  position: relative;
  box-sizing: border-box;
  overflow: hidden;
  background-color: white; }
  .demo__section ~ .demo__section {
    border-top: 1px solid #f1f1f1; }

.demo__header {
  box-sizing: border-box;
  margin-right: -0.5rem;
  padding: 0.5rem 1rem 0;
  text-align: right; }

.exploded--is-being-initialized .exploded__pane {
  -webkit-transition: -webkit-transform 0.25s ease;
          transition: transform 0.25s ease; }

.exploded__source,
.exploded__structure {
  padding: 1rem 2rem; }

.exploded__structure {
  position: relative;
  -webkit-perspective: 2000px;
          perspective: 2000px;
  -webkit-transform-style: preserve-3d;
          transform-style: preserve-3d;
  cursor: pointer; }

.exploded__structure__content {
  position: relative;
  z-index: 0;
  margin: 0 auto; }

.exploded__control-container {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-align: end;
  -webkit-align-items: flex-end;
      -ms-flex-align: end;
          align-items: flex-end;
  margin: 3rem -1rem 0; }

.exploded__control {
  -webkit-box-flex: 1;
  -webkit-flex: 1 1 0;
      -ms-flex: 1 1 0;
          flex: 1 1 0;
  margin-left: 1rem; }
  .exploded__control:first-child {
    margin-left: 0; }

.exploded__pane {
  position: absolute;
  box-sizing: content-box;
  border-radius: 4px;
  background-color: rgba(156, 157, 165, 0.6);
  border: 1px solid rgba(227, 228, 230, 0.5);
  -webkit-transition: background 0.3s ease;
          transition: background 0.3s ease; }
  .exploded__pane:hover {
    background-color: #b7d6f6; }

.exploded__pane--is-selected, .exploded__pane--is-selected:hover {
  background: #8cc2fb;
  opacity: 1; }

/*# sourceMappingURL=data:application/json;base64, */