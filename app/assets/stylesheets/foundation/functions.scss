//        ___      ___          ___          ___          ___
//       /  /\    /__/\        /__/\        /  /\        /  /\
//      /  /:/_   \  \:\       \  \:\      /  /:/       /  /:/_
//     /  /:/ /\   \  \:\       \  \:\    /  /:/       /  /:/ /\
//    /  /:/ /:/__  \  \:\  _____\__\:\  /  /:/  ___  /  /:/ /::\
//   /__/:/ /:/__/\  \__\:\/__/::::::::\/__/:/  /  /\/__/:/ /:/\:\
//   \  \:\/:/\  \:\ /  /:/\  \:\~~\~~\/\  \:\ /  /:/\  \:\/:/~/:/
//    \  \::/  \  \:\  /:/  \  \:\  ~~~  \  \:\  /:/  \  \::/ /:/
//     \  \:\   \  \:\/:/    \  \:\       \  \:\/:/    \__\/ /:/
//      \  \:\   \  \::/      \  \:\       \  \::/       /__/:/
//       \__\/    \__\/        \__\/        \__\/        \__\/
//
//*
// @pattern Functions
// @group Helper
// @author Chris Sauve (github: lemonmade)
//
// Functions simply return a value: they don't actually add a any styles to
// the compiled stylesheet. Use these to provide solutions to common calculations
// or Sass operations.



//*
// Removes the units from a number.
//
// @param {Number} $value - The number (usually a measurement) that you would
//                          like to remove units from.
// @returns {Number}

@function strip-units($value) {
  @return ($value / ($value*0 + 1));
}



//*
// Converts the passed value (assumed to be in pixels) to the corresponding `rem`
// value. This conversion assumes a base font size of `16px`.
//
// @param {Number} $value - The pixel value to convert.
// @returns {Number}

@function rem($value) {
  @return (strip-units($value) / 16 * 1rem);
}

//*
// Halves a given measurement.
//
// @param {Number} $measurement - The measurement to halve.
// @returns {Number}
// @alias half
//
// @example
// $foo: halve(4rem); // => 2rem
// $bar: half(36); // => 18

@function halve($measurement) {
  @return ($measurement / 2);
}

@function half($measurement) {
  @return halve($measurement);
}

@function double($measurement) {
  @return ($measurement * 2);
}
